#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

@author: Frank Nussbaum (frank.nussbaum@uni-jena.de), 2019

"""
import time
import unittest
import logging # https://stackoverflow.com/questions/284043/outputting-data-from-unit-test-in-python


import numpy as np

from cgmodsel.admm_pwsl import AdmmCGaussianSL, AdmmGaussianSL

from cgmodsel.dataops import load_prepare_data  # function to read data
 
  
def testSL_cvxreference_solutions(solver = 'ADMM'): 
    """use some precomputed solutions from cvx S+L problem solver"""
    # problem: in-midst the solving process L=FF^T becomes (close to) zero
    # this does always yield a small gradient w.r.t. F
    # hence the solver is almost incapable of moving L from zero away later
    # solution idea: fork & restart with new random L if L is close to zero at any point, take better solution
    # requires now a separate solving procedure for S+L models
    
    # actually the key is not terminating to early if function value changes little
    # --> small ftol
    
    ## discrete model tests
    Dtests = []


    S = np.array([[-2.0148,7.8604e-14,-5.2736e-15],[7.8604e-14,-2.0109,4.14e-13],[-5.2736e-15,4.14e-13,-2.6093]])
    L = np.array([[0.24652,0.51234,0.43764],[0.51234,1.0648,0.90954],[0.43764,0.90954,0.77693]])
    f = 1.9644
    refsol = (S, L, f, {'off':1, 'use_u':1})
    solverparams = (.2, .2)
    Dtests.append(("DChain_s12d3_1L", refsol, solverparams, 
                  "unittest_data/py_D_s12d3l1.csv") ) # th_dis =1, n=100

    ## categorical models
    Cattests = []
    S = np.array([[1.7508,-0.48957,0.45206,-1.446,-3.2523e-12,-3.0942e-12],[-0.48957,-1.9733,1.1795,1.6568,2.6379e-13,1.4208e-12],[0.45206,1.1795,-0.2606,-0.58319,-0.61309,0.18918],[-1.446,1.6568,-0.58319,1.5069,-0.10094,-1.3125],[-3.2523e-12,2.6379e-13,-0.61309,-0.10094,0.41389,-1.2358],[-3.0942e-12,1.4208e-12,0.18918,-1.3125,-1.2358,1.6213]])
    L = np.array([[1.1531,0.48957,0.72742,0.89106,-1.0996,-1.2864],[0.48957,0.23665,0.3202,0.43173,-0.47376,-0.58422],[0.72742,0.3202,0.46336,0.58319,-0.69641,-0.82651],[0.89106,0.43173,0.58319,0.78764,-0.86253,-1.0647],[-1.0996,-0.47376,-0.69641,-0.86253,1.0503,1.2358],[-1.2864,-0.58422,-0.82651,-1.0647,1.2358,1.4854]])
    f = 2.6968
    refsol = (S, L, f, {'off':1, 'use_u':1})
    solverparams = .1, .1
#    Cattests.append(("Catchain_d3_0L.csv", refsol, solverparams, 
#                  "unittest_data/Catchain_d3.csv") ) # th_dis =1, n=100

    S = np.array([[1.7773,-0.13371,2.8333e-13,4.2409e-13,8.9595e-14,3.9735e-13,2.3359e-13,-1.118e-12,-8.9974e-13,-1.3969e-12,-2.4869e-14,1.4277e-13],[-0.13371,-0.58185,1.5093e-13,8.5465e-13,-1.38e-13,-1.5477e-13,2.649e-13,1.2028e-13,3.3692e-13,7.6633e-13,9.7131e-14,1.4593e-13],[2.8333e-13,1.5093e-13,0.83142,0.8138,5.4394e-13,-1.299e-12,-1.031,0.10604,1.4658e-13,3.8053e-14,-8.6009e-13,1.298e-12],[4.2409e-13,8.5465e-13,0.8138,-1.7922,-6.5697e-13,6.0285e-14,0.20187,0.4609,-8.1268e-14,-1.9207e-14,2.9812e-13,-1.0214e-12],[8.9595e-14,-1.38e-13,5.4394e-13,-6.5697e-13,-4.3786,0.98751,1.3129,0.57921,-2.2427e-13,8.8818e-15,2.1791e-12,6.9084e-14],[3.9735e-13,-1.5477e-13,-1.299e-12,6.0285e-14,0.98751,-1.6888,-1.6974,1.1334,5.6111e-13,3.838e-13,-3.0009e-13,1.1178e-12],[2.3359e-13,2.649e-13,-1.031,0.20187,1.3129,-1.6974,-0.34584,-0.57584,0.78546,0.072549,-6.6491e-13,7.7877e-13],[-1.118e-12,1.2028e-13,0.10604,0.4609,0.57921,1.1334,-0.57584,0.0027639,-0.022444,-1.7247,1.9784e-13,4.487e-13],[-8.9974e-13,3.3692e-13,1.4658e-13,-8.1268e-14,-2.2427e-13,5.6111e-13,0.78546,-0.022444,-0.44758,-0.68695,-3.3806e-14,-2.1094e-14],[-1.3969e-12,7.6633e-13,3.8053e-14,-1.9207e-14,8.8818e-15,3.838e-13,0.072549,-1.7247,-0.68695,1.3442,1.3173e-13,8.3433e-14],[-2.4869e-14,9.7131e-14,-8.6009e-13,2.9812e-13,2.1791e-12,-3.0009e-13,-6.6491e-13,1.9784e-13,-3.3806e-14,1.3173e-13,-1.7718,0.48834],[1.4277e-13,1.4593e-13,1.298e-12,-1.0214e-12,6.9084e-14,1.1178e-12,7.7877e-13,4.487e-13,-2.1094e-14,8.3433e-14,0.48834,-4.7815]])
    L = np.array([[1.237,0.13371,0.65183,0.11985,-0.72,-0.19358,0.32455,-0.78937,-0.061706,-0.40711,-1.2772,0.55347],[0.13371,0.84947,-0.39407,0.88104,-0.083829,-0.62542,1.0838,0.10533,-0.12856,-0.15238,-0.11396,0.0087404],[0.65183,-0.39407,0.83162,-0.8138,-0.072817,0.28124,-0.27972,-0.72796,0.17476,0.19795,-0.58262,0.75612],[0.11985,0.88104,-0.8138,1.625,-0.38688,-0.92419,1.025,0.62012,-0.50941,-0.92362,-0.16429,-0.74996],[-0.72,-0.083829,-0.072817,-0.38688,2.0658,-0.98751,0.75907,1.0556,-0.59551,-0.29733,1.5486,0.24169],[-0.19358,-0.62542,0.28124,-0.92419,-0.98751,2.0365,-1.4197,-0.27936,1.2205,0.84136,-0.55326,0.4276],[0.32455,1.0838,-0.27972,1.025,0.75907,-1.4197,1.9863,0.57584,-0.53381,-0.72725,0.14731,0.40071],[-0.78937,0.10533,-0.72796,0.62012,1.0556,-0.27936,0.57584,2.0852,-0.26568,-1.1683,1.0276,-0.28791],[-0.061706,-0.12856,0.17476,-0.50941,-0.59551,1.2205,-0.53381,-0.26568,0.8733,0.68695,-0.40736,0.51857],[-0.40711,-0.15238,0.19795,-0.92362,-0.29733,0.84136,-0.72725,-1.1683,0.68695,1.6939,0.12678,0.25389],[-1.2772,-0.11396,-0.58262,-0.16429,1.5486,-0.55326,0.14731,1.0276,-0.40736,0.12678,1.7615,-0.48834],[0.55347,0.0087404,0.75612,-0.74996,0.24169,0.4276,0.40071,-0.28791,0.51857,0.25389,-0.48834,1.3823]])
    f = 4.6354
    refsol = (S, L, f, {'off':1, 'use_u':1})
    solverparams = .1, .1
    Cattests.append(("Catchain_d6_0L.csv", refsol, solverparams, 
                  "unittest_data/Catchain_d6.csv") ) # th_dis =1, n=100
##### Gaussian models
    Gtests = []
    
    S = np.array([[-1.3526,-0.0066189,1.7174e-12,9.5791e-14,-9.142e-14],[-0.0066189,-1.2408,-0.34376,-0.052764,-0.0067642],[1.7174e-12,-0.34376,-1.2603,-0.52609,-0.0541],[9.5791e-14,-0.052764,-0.52609,-1.1567,-0.55651],[-9.142e-14,-0.0067642,-0.0541,-0.55651,-0.98124]])

    L = np.array([[0.19457,-0.19506,0.17953,0.059501,-0.043471],[-0.19506,0.19556,-0.17999,-0.059653,0.043583],[0.17953,-0.17999,0.16566,0.054904,-0.040112],[0.059501,-0.059653,0.054904,0.018196,-0.013294],[-0.043471,0.043583,-0.040112,-0.013294,0.0097127]])
    f = 2.3089
    refsol = S, L, f, {'off':1,  'use_alpha':0}
    solverparams = .1, 0.2 
    Gtests.append(("GChain_s30d5_1L", refsol, solverparams, \
                  "unittest_data/py_G_s30n5.csv")) # th_cts = 0.4
    
    S = np.array([[-3.7115,-2.5806e-10,-2.0324e-10,-3.8522e-11,5.1024e-11,-1.1406e-11,4.8437e-11,-1.4763e-10,-9.0311e-11,-2.3685e-11,-1.0376e-10,4.6053e-11],[-2.5806e-10,-4.6524,-2.1598e-10,-3.4537e-11,9.4106e-11,-1.271e-11,1.6364e-11,-2.2308e-10,3.386e-11,-1.9998e-11,-1.8232e-10,-6.7391e-11],[-2.0324e-10,-2.1598e-10,-4.6485,-1.1153e-10,1.3213e-11,-9.5399e-11,-7.686e-11,-2.8856e-10,2.9572e-11,-3.3279e-11,-2.3707e-10,-1.215e-10],[-3.8522e-11,-3.4537e-11,-1.1153e-10,-3.9274,-1.9501e-10,-2.613e-10,-2.6643e-10,-1.8369e-10,-9.3189e-11,-5.5339e-11,-8.982e-11,-5.4114e-11],[5.1024e-11,9.4106e-11,1.3213e-11,-1.9501e-10,-3.7127,-2.1063e-10,-2.0458e-10,-2.3064e-12,-2.0605e-10,-6.8329e-11,7.2147e-11,7.6432e-11],[-1.1406e-11,-1.271e-11,-9.5399e-11,-2.613e-10,-2.1063e-10,-4.1732,-2.3781e-10,-1.1774e-10,-1.474e-10,-9.6883e-11,-3.991e-11,-2.4058e-12],[4.8437e-11,1.6364e-11,-7.686e-11,-2.6643e-10,-2.0458e-10,-2.3781e-10,-3.6583,-1.503e-10,-1.9503e-11,-2.6123e-11,-9.2994e-11,-1.0074e-10],[-1.4763e-10,-2.2308e-10,-2.8856e-10,-1.8369e-10,-2.3064e-12,-1.1774e-10,-1.503e-10,-3.3107,3.8178e-11,-3.8612e-11,-2.4148e-10,-1.6124e-10],[-9.0311e-11,3.386e-11,2.9572e-11,-9.3189e-11,-2.0605e-10,-1.474e-10,-1.9503e-11,3.8178e-11,-4.0242,-4.2419e-11,1.3172e-10,2.345e-10],[-2.3685e-11,-1.9998e-11,-3.3279e-11,-5.5339e-11,-6.8329e-11,-9.6883e-11,-2.6123e-11,-3.8612e-11,-4.2419e-11,-3.0636,-1.0591e-10,-2.8751e-11],[-1.0376e-10,-1.8232e-10,-2.3707e-10,-8.982e-11,7.2147e-11,-3.991e-11,-9.2994e-11,-2.4148e-10,1.3172e-10,-1.0591e-10,-3.6648,-1.9186e-10],[4.6053e-11,-6.7391e-11,-1.215e-10,-5.4114e-11,7.6432e-11,-2.4058e-12,-1.0074e-10,-1.6124e-10,2.345e-10,-2.8751e-11,-1.9186e-10,-3.6827]])
    L = np.array([[0.5763,-0.26802,-0.10532,0.12371,0.086309,-0.27992,0.23969,-0.2695,-0.031901,0.019665,0.059873,0.22915],[-0.26802,1.2739,-0.86502,0.04751,0.08103,0.20984,0.13013,-0.012254,-0.17143,0.090891,-0.37338,0.11523],[-0.10532,-0.86502,1.3975,-0.55748,0.32747,0.051082,-0.22606,-0.18164,0.057971,-0.088818,0.066716,-0.011853],[0.12371,0.04751,-0.55748,1.2306,-0.41033,-0.37977,-0.2975,-0.039183,-0.044385,0.12113,-0.015667,-0.010973],[0.086309,0.08103,0.32747,-0.41033,1.1162,-0.77142,0.11388,-0.0098364,-0.081704,-0.0094082,0.0637,0.14165],[-0.27992,0.20984,0.051082,-0.37977,-0.77142,1.5443,-0.3174,-0.18043,-0.077988,-0.17963,-0.2453,0.063682],[0.23969,0.13013,-0.22606,-0.2975,0.11388,-0.3174,0.74352,-0.16057,-0.10933,0.050196,0.29978,-0.31863],[-0.2695,-0.012254,-0.18164,-0.039183,-0.0098364,-0.18043,-0.16057,0.78829,0.13964,0.14805,-0.27996,-0.041755],[-0.031901,-0.17143,0.057971,-0.044385,-0.081704,-0.077988,-0.10933,0.13964,0.41041,-0.028612,-0.058597,0.3474],[0.019665,0.090891,-0.088818,0.12113,-0.0094082,-0.17963,0.050196,0.14805,-0.028612,0.1612,-0.27141,0.056868],[0.059873,-0.37338,0.066716,-0.015667,0.0637,-0.2453,0.29978,-0.27996,-0.058597,-0.27141,1.0239,-0.67082],[0.22915,0.11523,-0.011853,-0.010973,0.14165,0.063682,-0.31863,-0.041755,0.3474,0.056868,-0.67082,1.032]])
    f = -0.371591
    refsol = S, L, f, {'off':1,  'use_alpha':0}
    solverparams = (1, 0.2) 
    Gtests.append(("GChain_s12d12_1L", refsol, solverparams, \
                  "unittest_data/py_G_s12d12l1.csv")) # th_cts = 0.4
    # SDPT3 and SeDuMi both yield this solution, also some other seedpoints in Python
    # however seed 5 and tolerancies 10E-8 yield a better solution here...
    # interestingly, decreasing tolerancies leads to the cvx solution again
    
    S = np.array([[-1.3187,-0.21609,6.4258e-12,2.6012e-13,8.0554e-14,-1.2423e-13,1.1383e-12,-0.011551,-5.5478e-14,-3.8269e-13],[-0.21609,-1.2817,-0.3882,-3.9528e-13,-2.8832e-13,-5.1825e-12,7.9495e-13,-2.6321e-13,-0.10154,-3.2205e-13],[6.4258e-12,-0.3882,-1.4619,-0.38385,-5.1183e-13,-1.5589e-12,-8.3656e-14,2.7284e-13,-2.1406e-12,4.7868e-14],[2.6012e-13,-3.9528e-13,-0.38385,-1.3085,-0.46904,-0.22556,-0.14912,-0.030929,-0.027344,2.2425e-13],[8.0554e-14,-2.8832e-13,-5.1183e-13,-0.46904,-0.94987,-0.47885,-0.13137,-0.080934,-0.05257,3.4173e-13],[-1.2423e-13,-5.1825e-12,-1.5589e-12,-0.22556,-0.47885,-1.2109,-0.51205,-0.013725,-5.5831e-13,0.11409],[1.1383e-12,7.9495e-13,-8.3656e-14,-0.14912,-0.13137,-0.51205,-1.4994,-0.80577,-3.688e-13,0.14329],[-0.011551,-2.6321e-13,2.7284e-13,-0.030929,-0.080934,-0.013725,-0.80577,-1.6337,-0.43106,4.1566e-14],[-5.5478e-14,-0.10154,-2.1406e-12,-0.027344,-0.05257,-5.5831e-13,-3.688e-13,-0.43106,-1.2081,-0.41731],[-3.8269e-13,-3.2205e-13,4.7868e-14,2.2425e-13,3.4173e-13,0.11409,0.14329,4.1566e-14,-0.41731,-1.1698]])
    L = np.array([[0.18961,-0.18434,0.13501,0.056797,0.027486,-0.0057481,-0.018998,-0.05019,0.005231,0.0051676],[-0.18434,0.27492,-0.13057,-0.08256,-0.050059,-0.073961,0.1038,0.049801,-0.0079678,-0.039842],[0.13501,-0.13057,0.23884,-0.030459,-0.0012055,-0.0777,0.0064407,0.11079,-0.068451,0.0065121],[0.056797,-0.08256,-0.030459,0.063498,0.030741,0.065369,-0.033454,-0.09039,0.02127,0.027843],[0.027486,-0.050059,-0.0012055,0.030741,0.021353,0.041754,-0.016768,-0.0325,-0.014197,0.036425],[-0.0057481,-0.073961,-0.0777,0.065369,0.041754,0.12204,-0.066325,-0.079849,0.0012743,0.067351],[-0.018998,0.1038,0.0064407,-0.033454,-0.016768,-0.066325,0.091182,0.021586,-0.041618,-0.00069515],[-0.05019,0.049801,0.11079,-0.09039,-0.0325,-0.079849,0.021586,0.16542,-0.06406,-0.010691],[0.005231,-0.0079678,-0.068451,0.02127,-0.014197,0.0012743,-0.041618,-0.06406,0.11487,-0.083179],[0.0051676,-0.039842,0.0065121,0.027843,0.036425,0.067351,-0.00069515,-0.010691,-0.083179,0.10061]])
    f = 4.2790
    refsol = S, L, f, {'off':1, 'use_alpha':0}
    solverparams = (.1, 0.2) 
    Gtests.append(("GChain_s30d10_1L", refsol, solverparams, \
                  "unittest_data/py_G_s30n10.csv")) # th_cts = 0.4
    
##### CG models
    CGtests = []

    S= np.array([[-4.3478,2.9928e-11,-1.3888e-11,3.5375e-11],[2.9928e-11,-4.3002,7.6103e-11,3.6817e-11],[-1.3888e-11,7.6103e-11,-2.8814,-5.4958e-11],[3.5375e-11,3.6817e-11,-5.4958e-11,-2.3647]])
    L = np.array([[0.19125,-0.14341,-0.46297,0.37412],[-0.14341,0.21216,0.48569,-0.32893],[-0.46297,0.48569,1.3042,-0.96972],[0.37412,-0.32893,-0.96972,0.75421]])
    f = 1.25778
    refsol = S, L, f, {'off':1, 'use_u':1, 'use_alpha':0}
    solverparams = (1, 0.2) 
    CGtests.append(("DblChain_s12d2_1L", refsol, solverparams, 
                  "unittest_data/py_CG_s12d2l1.csv"))

    S= np.array([[-3.5971,1.2036e-12,3.6304e-13,-0.5854,-5.4106e-15,-1.3942e-10],[1.2036e-12,-2.9271,-2.5679e-13,-4.5677e-13,-0.84596,1.5184e-13],[3.6304e-13,-2.5679e-13,-5.2814,-1.5548e-12,-0.13043,-0.90272],[-0.5854,-4.5677e-13,-1.5548e-12,-1.2995,-0.39755,-0.31256],[-5.4106e-15,-0.84596,-0.13043,-0.39755,-1.1135,-0.3467],[-1.3942e-10,1.5184e-13,-0.90272,-0.31256,-0.3467,-1.0855]])
    L =np.array([[0.47022,0.20023,0.35059,-0.36113,-0.0020348,-0.19258],[0.20023,0.085257,0.14928,-0.15377,-0.00086643,-0.082002],[0.35059,0.14928,0.26139,-0.26925,-0.0015171,-0.14358],[-0.36113,-0.15377,-0.26925,0.27734,0.0015627,0.1479],[-0.0020348,-0.00086643,-0.0015171,0.0015627,8.8052e-06,0.00083335],[-0.19258,-0.082002,-0.14358,0.1479,0.00083335,0.078872]])
    f = 2.7949 # Huber fails to find solution with non-zero L
#    S= np.array([[-4.1609,2.5924e-14,9.5479e-15,-1.934e-13,-1.2643e-14,-2.6007e-14],[2.5924e-14,-3.6004,-4.2966e-14,-3.6249e-14,-3.5516e-13,-5.8228e-14],[9.5479e-15,-4.2966e-14,-6.0177,-6.0923e-14,-1.1909e-13,-6.537e-13],[-1.934e-13,-3.6249e-14,-6.0923e-14,-2.2064,-1.4611e-13,-1.8824e-13],[-1.2643e-14,-3.5516e-13,-1.1909e-13,-1.4611e-13,-2.3146,-2.4758e-13],[-2.6007e-14,-5.8228e-14,-6.537e-13,-1.8824e-13,-2.4758e-13,-2.2504]])
#    L =np.array([[0.88847,0.38194,0.5649,-0.90232,0.017479,-0.23247],[0.38194,0.67575,0.34363,-0.1314,-0.78514,0.025117],[0.5649,0.34363,0.93556,-0.21787,-0.067458,-0.934],[-0.90232,-0.1314,-0.21787,1.2124,-0.3726,-0.14601],[0.017479,-0.78514,-0.067458,-0.3726,1.2394,-0.31141],[-0.23247,0.025117,-0.934,-0.14601,-0.31141,1.2727]]) 
#    f = 2.8478 
    refsol = S, L, f, {'off':1, 'use_u':1, 'use_alpha':0}
    solverparams = .1, .2 
    CGtests.append(("Dbl1Chain_s12d3_0L", refsol, solverparams, 
                  "unittest_data/py_CG_s12d3l0.csv"))

    # CG data set (Doublechain with 6 discrete/cont. variables)
    S = np.array([[-6.8033,0.15632,3.3951e-13,-4.0276e-13,-4.9405e-15,2.0073e-13,-1.0887e-12,0.035074,2.0272e-13,5.3912e-13,-3.5003e-13,1.113e-14],[0.15632,-3.8193,5.9441e-13,1.4522e-13,-3.2012e-13,8.0491e-14,1.4028e-13,-0.19938,5.1387e-13,-2.2052e-13,4.9811e-14,0.042576],[3.3951e-13,5.9441e-13,-5.1017,0.7239,4.6019e-13,2.2587e-13,0.014329,7.0737e-14,-4.9616e-13,0.22519,0.17927,1.748e-13],[-4.0276e-13,1.4522e-13,0.7239,-3.7529,1.1457,-1.2931e-12,7.4718e-14,0.44977,6.0074e-13,-3.6415e-13,4.4797e-14,2.2538e-14],[-4.9405e-15,-3.2012e-13,4.6019e-13,1.1457,-3.0973,1.984e-13,-0.081073,-0.011972,-5.3291e-15,-5.8051e-14,-1.138,-5.9819e-13],[2.0073e-13,8.0491e-14,2.2587e-13,-1.2931e-12,1.984e-13,-3.4529,1.8573e-12,0.5622,0.2389,1.5765e-14,-0.030681,-5.107e-13],[-1.0887e-12,1.4028e-13,0.014329,7.4718e-14,-0.081073,1.8573e-12,-3.5648,-1.8816e-12,-0.050723,-0.2577,-3.0975e-13,-0.49405],[0.035074,-0.19938,7.0737e-14,0.44977,-0.011972,0.5622,-1.8816e-12,-2.3818,-0.90699,-0.3568,3.1808e-13,-9.2102e-14],[2.0272e-13,5.1387e-13,-4.9616e-13,6.0074e-13,-5.3291e-15,0.2389,-0.050723,-0.90699,-2.8076,-0.23169,4.947e-13,-1.9428e-12],[5.3912e-13,-2.2052e-13,0.22519,-3.6415e-13,-5.8051e-14,1.5765e-14,-0.2577,-0.3568,-0.23169,-3.2426,4.5852e-14,-1.5039e-12],[-3.5003e-13,4.9811e-14,0.17927,4.4797e-14,-1.138,-0.030681,-3.0975e-13,3.1808e-13,4.947e-13,4.5852e-14,-2.0912,-0.59865],[1.113e-14,0.042576,1.748e-13,2.2538e-14,-5.9819e-13,-5.107e-13,-0.49405,-9.2102e-14,-1.9428e-12,-1.5039e-12,-0.59865,-3.444]])
    L = np.array([[1.0666,0.55819,0.62756,-0.23423,0.097006,0.52042,-0.2589,0.14424,-0.031059,0.61736,-0.22707,0.16571],[0.55819,1.2518,1.0665,0.54348,-0.086298,0.17982,0.40827,-0.05312,0.084308,-0.18774,0.0017826,0.65164],[0.62756,1.0665,1.4719,0.44792,-0.036709,0.34941,0.653,0.012484,-0.27278,0.25655,0.064469,0.36245],[-0.23423,0.54348,0.44792,0.75951,-0.11058,-0.22997,0.33783,0.072628,0.2258,-0.60824,0.35697,0.29138],[0.097006,-0.086298,-0.036709,-0.11058,0.1497,0.27833,0.018075,-0.032437,0.1379,0.1033,-0.10462,-0.25625],[0.52042,0.17982,0.34941,-0.22997,0.27833,0.69393,0.14988,-0.087247,0.13291,0.40428,-0.28975,-0.33144],[-0.2589,0.40827,0.653,0.33783,0.018075,0.14988,0.85251,-0.27294,-0.15007,-0.15973,-0.0012633,0.0084292],[0.14424,-0.05312,0.012484,0.072628,-0.032437,-0.087247,-0.27294,0.22922,0.033579,0.055706,0.16759,0.0097768],[-0.031059,0.084308,-0.27278,0.2258,0.1379,0.13291,-0.15007,0.033579,0.58661,-0.41743,0.030971,-0.11877],[0.61736,-0.18774,0.25655,-0.60824,0.1033,0.40428,-0.15973,0.055706,-0.41743,0.89456,-0.26125,-0.22317],[-0.22707,0.0017826,0.064469,0.35697,-0.10462,-0.28975,-0.0012633,0.16759,0.030971,-0.26125,0.31326,0.078023],[0.16571,0.65164,0.36245,0.29138,-0.25625,-0.33144,0.0084292,0.0097768,-0.11877,-0.22317,0.078023,0.70581]])
    f = 3.5787
    refsol = S, L, f, {'off':1, 'use_u':1, 'use_alpha':0}
    solverparams = .1, 0.2 
    CGtests.append(("DblChain_s12d6_1L", refsol, solverparams, 
                  "unittest_data/py_CG_s12d6l1.csv"))

# CG - real world data
    CGreal = []
    S= np.array([[-16.1577,0,8.9976e-12,-2.6581e-11,3.4837e-11,-2.293e-11],[0,-43.9749,-1.4577e-11,1.5432e-12,2.5736e-11,4.3881e-11],[8.9976e-12,-1.4577e-11,-12.5917,9.5113e-11,8.1424e-11,-6.3193e-11],[-2.6581e-11,1.5432e-12,9.5113e-11,-13.7409,-6.4073e-11,6.311e-11],[3.4837e-11,2.5736e-11,8.1424e-11,-6.4073e-11,-17.5328,6.0962e-11],[-2.293e-11,4.3881e-11,-6.3193e-11,6.311e-11,6.0962e-11,-25.2529]])
    L = np.array([[2.0241,1.5539,0.46729,-2.1833,3.9121,1.044],[1.5539,4.588,-0.68339,-1.7168,6.2163,5.3576],[0.46729,-0.68339,8.0645,5.3003,2.8592,-0.46043],[-2.1833,-1.7168,5.3003,6.7483,-2.0269,-0.65204],[3.9121,6.2163,2.8592,-2.0269,11.7355,6.5982],[1.044,5.3576,-0.46043,-0.65204,6.5982,6.7164]])
    f = -1.85807
    refsol = S, L, f, {'off':1, 'use_u':1, 'use_alpha':0}
    solverparams = (1, 0.2) 
#    CGreal.append(("Iris_original", refsol, solverparams, 
#                  "unittest_data/iris_nonstandardized_py.csv")) # th_cts = 0.4
    
    S= np.array([[1.7844,0,-4.5795e-12,-3.4451e-12,1.524e-11,-1.4277e-11],[0,-2.4463,-2.9251e-12,4.8737e-12,1.5004e-12,1.9114e-11],[-4.5795e-12,-2.9251e-12,-10.2241,6.7609e-11,6.6978e-11,-6.0842e-11],[-3.4451e-12,4.8737e-12,6.7609e-11,-5.0205,-6.3651e-11,5.6963e-11],[1.524e-11,1.5004e-12,6.6978e-11,-6.3651e-11,-29.2807,6.2954e-11],[-1.4277e-11,1.9114e-11,-6.0842e-11,5.6963e-11,6.2954e-11,-19.0419]])
    L = np.array([[0.35912,-0.0094744,0.52016,-0.79346,1.4929,0.14674],[-0.0094744,1.0013,0.10838,0.13763,2.7186,2.8959],[0.52016,0.10838,5.2482,1.4515,4.3536,0.46048],[-0.79346,0.13763,1.4515,3.2601,-1.9061,-0.047246],[1.4929,2.7186,4.3536,-1.9061,14.5723,8.5554],[0.14674,2.8959,0.46048,-0.047246,8.5554,8.4627]])
    f = -1.12586
    refsol = S, L, f, {'off':1, 'use_u':1, 'use_alpha':0}
    solverparams = (1, 0.2) 
    CGreal.append(("Iris_standardized", refsol, solverparams, 
                  "unittest_data/iris_standardized_py.csv")) # th_cts = 0.4



class TestSLSolvers(unittest.TestCase):
    """"""
    def setUp(self):
        self.solver = AdmmCGaussianSL()

        opts = {'maxiter':500, 'continuation':1, 'off':1, 'verb':0, 'stoptol':1e-8,
                'lhproxtol':1e-10, 'cont_adaptive': 1, 'use_u':0}
        self.solver.opts.update(opts)
        
        self.ftol = 1e-4
        self.tic = time.time()
        
    def tearDown(self):
        toc = time.time() - self.tic
        print ("%s: %.3f" % (self.id(), toc) )
        
    def test_cat1(self):
        Scvx = np.array([[0,7.2413e-13,-1.6943e-13],[7.2413e-13,0,0.38863],[-1.6943e-13,0.38863,0]])
        Lcvx = np.array([[1.8426e-13,1.6744e-13,1.2959e-14],[1.6744e-13,7.4865e-13,1.9285e-13],[1.2959e-14,1.9285e-13,1.8283e-13]])
        fcvx = 2.0615
        refsol = Scvx, Lcvx, fcvx
        refopts = {'off':1, 'use_u':0}
        hyperparams = .2, .2
        testname = "DChain_s12d3_1L"
        filename = "tests/data/py_D_s12d3l1.csv"

        f_admm = self._joint(refsol, refopts, hyperparams, filename)
        
        fdiff = f_admm -  fcvx
#        tname = '<%s>: %s vs. CVX...'%(testname, name)

#        if fdiff < 0:
#            print(testname, 'OK:better f=%.3f < f_cvx=%.3f'%(f_admm, fcvx))
#        else:
#            print(testname, 'FAILED f=%.3f > f_cvx=%.3f'%(f_admm, fcvx))


        self.assertTrue(abs(fdiff) < self.ftol,
                        msg="%f not equal %f"%(fcvx, f_admm))




    def _joint(self, refsol, refopts, hyperparams, filename):
        """joint work for all tests in this class"""
        self.solver.opts.update(refopts)
                
        D, Y, meta = load_prepare_data(filename, standardize = False)
        D_red = np.delete(D, meta['cat_glims'][:-1], 1)
        data = D_red, Y
        
        ## learn S+L model - PADMM

        self.solver.drop_data(data, meta)
        self.solver.set_regularization_params(hyperparams) 

        print(self.solver)
        out = self.solver.solve(verb=1,report = 0)

        modelA = self.solver.get_canonicalparams()

        Scvx, Lcvx, fcvx = refsol
        f_cvx = self.solver.get_objective(Scvx, Lcvx)
        self.assertAlmostEqual(f_cvx, fcvx, places = 3, msg="%f not equal %f"%(f_cvx, fcvx))
#        print('diff cvx f=', cvx_f - f_cvx)
        f_admm = self.solver.get_objective(*modelA.get_params_sl(padded = False))
        
        return f_admm


#    def test_isupper(self):
#        self.assertTrue('FOO'.isupper())
#        self.assertFalse('Foo'.isupper())
#
#    def test_split(self):
#        s = 'hello world'
#        self.assertEqual(s.split(), ['hello', 'world'])
#        # check that s.split fails when the separator is not a string
#        with self.assertRaises(TypeError):
#            s.split(2)

if __name__ == '__main__':
    unittest.main()